openapi: 3.0.3
info:
  title: Expiration tracker API
  version: 1.0.0
  description: App to track expiration dates of medication and other goods
paths:
  /api/auth/:
    post:
      operationId: auth_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAuthResponse'
          description: ''
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/verify/:
    post:
      operationId: auth_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/items/:
    get:
      operationId: items_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: upc
        schema:
          type: string
      tags:
      - items
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReprBaseItemList'
          description: ''
    post:
      operationId: items_create
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReprItem'
          description: ''
  /api/items/{id}/:
    get:
      operationId: items_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this item.
        required: true
      tags:
      - items
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReprItem'
          description: ''
    put:
      operationId: items_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this item.
        required: true
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReprItem'
          description: ''
    patch:
      operationId: items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this item.
        required: true
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedItemRequest'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReprItem'
          description: ''
  /api/items/choices/:
    get:
      operationId: items_choices_retrieve
      description: Get ENUM choices for item
      summary: Get choices for item
      tags:
      - items
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Choice'
          description: ''
  /api/items/search/:
    post:
      operationId: items_search_create
      description: Send search string to duck duck go
      summary: Perform search
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemSearchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemSearchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemSearchRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResult'
          description: Created. New resource in response
        '400':
          description: Bad request (something invalid)
  /api/locations/:
    get:
      operationId: locations_list
      description: |-
        create:
        Create Location

        list:
        All Locations

        retrieve:
        Details for single location
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - locations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBaseLocationList'
          description: ''
    post:
      operationId: locations_create
      description: |-
        create:
        Create Location

        list:
        All Locations

        retrieve:
        Details for single location
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LocationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LocationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
  /api/locations/{id}/:
    get:
      operationId: locations_retrieve
      description: |-
        create:
        Create Location

        list:
        All Locations

        retrieve:
        Details for single location
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - locations
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
components:
  schemas:
    BaseLocation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
      required:
      - id
      - title
    CategoryEnum:
      enum:
      - GOODS
      - MEDICATIONS
      type: string
      description: |-
        * `GOODS` - Goods
        * `MEDICATIONS` - Medications
    Choice:
      type: object
      properties:
        field:
          type: string
        values:
          type: array
          items:
            type: string
      required:
      - field
      - values
    CustomTokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    ItemRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        upc:
          type: string
          maxLength: 20
        category:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        opening_date:
          type: string
          format: date
          nullable: true
        expiration_date:
          type: string
          format: date
          nullable: true
        location:
          type: integer
      required:
      - location
      - title
    ItemSearchRequest:
      type: object
      properties:
        barcode:
          type: string
          minLength: 1
          maxLength: 50
      required:
      - barcode
    JWTAuthResponse:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - refresh
    Location:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
      required:
      - id
      - title
    LocationRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
      required:
      - title
    PaginatedBaseLocationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BaseLocation'
    PaginatedReprBaseItemList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReprBaseItem'
    PatchedItemRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        upc:
          type: string
          maxLength: 20
        category:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        opening_date:
          type: string
          format: date
          nullable: true
        expiration_date:
          type: string
          format: date
          nullable: true
        location:
          type: integer
    ReprBaseItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        upc:
          type: string
          maxLength: 20
        category:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        opening_date:
          type: string
          format: date
          nullable: true
        expiration_date:
          type: string
          format: date
          nullable: true
        location:
          $ref: '#/components/schemas/BaseLocation'
        ttl:
          type: integer
          readOnly: true
      required:
      - category
      - id
      - location
      - status
      - title
      - ttl
    ReprItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        upc:
          type: string
          maxLength: 20
        category:
          $ref: '#/components/schemas/CategoryEnum'
        status:
          $ref: '#/components/schemas/StatusEnum'
        opening_date:
          type: string
          format: date
          nullable: true
        expiration_date:
          type: string
          format: date
          nullable: true
        location:
          $ref: '#/components/schemas/BaseLocation'
        ttl:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - created_at
      - id
      - location
      - status
      - title
      - ttl
    SearchResult:
      type: object
      properties:
        title:
          type: string
        href:
          type: string
        body:
          type: string
      required:
      - body
      - href
      - title
    StatusEnum:
      enum:
      - STOCK
      - OPENED
      - DISPOSED
      - USED
      type: string
      description: |-
        * `STOCK` - Stock
        * `OPENED` - Opened
        * `DISPOSED` - Disposed
        * `USED` - Used
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
